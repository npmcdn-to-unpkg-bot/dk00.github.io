// Generated by LiveScript 1.5.0
window.imgur = function(){
  var params, headers;
  params = function(){
    var part, hash, data, m, ref$, key, value;
    part = /([^&=]+)=([^&]*)/g;
    hash = location.hash.slice(1);
    data = {};
    while (m = part.exec(hash)) {
      ref$ = m.map(decodeURIComponent), key = ref$[1], value = ref$[2];
      data[key] = value;
    }
    return data;
  }();
  headers = {
    Authorization: "Bearer " + params.access_token
  };
  return {
    params: params,
    call: function(args){
      var endpoint, url, options, that, body, key, value, this$ = this;
      endpoint = args.endpoint || args;
      url = "https://api.imgur.com/3/" + endpoint;
      options = {
        headers: headers
      };
      if (that = args.data) {
        body = new FormData;
        for (key in that) {
          value = that[key];
          body.append(key, value);
        }
        options.method = 'POST';
        options.body = body;
      }
      return fetch(url, options).then(function(it){
        return it.json();
      });
    },
    listAlbums: function(){
      var that;
      if (that = params.account_username) {
        return this.call("account/" + that + "/albums");
      } else {
        return Promise.resolve([]);
      }
    },
    upload: function(it){
      var data, ref$;
      data = {
        image: it,
        album: $('#album').val(),
        name: (ref$ = /\/([^/]+)$/.exec(it)) != null ? ref$[1] : void 8
      };
      return this.call({
        endpoint: 'image',
        data: data
      });
    }
  };
};
$(function(){
  var clientId, q, session, handleUrl, handlePaste, this$ = this;
  clientId = $('#client-id').val();
  $('#client-id').on('change', function(){
    clientId = this.value;
    return $('#login').attr('href', "https://api.imgur.com/oauth2/authorize?client_id=" + clientId + "&response_type=token");
  }).trigger('change');
  q = queue();
  session = window.imgur();
  handleUrl = function(url){
    var status;
    status = $('<div>');
    $('#status').append(status);
    status.text("waiting: " + url);
    return q.add(function(){
      status.text("uploading: " + url);
      return session.upload(url);
    }).then(function(){
      return status.text("done: " + url);
    });
  };
  handlePaste = function(event){
    return event.clipboardData.getData('text').split('\n').forEach(handleUrl);
  };
  session.listAlbums().then(function(arg$){
    var albums;
    albums = arg$.data;
    if (albums.length < 1) {
      return;
    }
    return $('#album').empty().prepend(albums.map(function(arg$){
      var title, id;
      title = arg$.title, id = arg$.id;
      return $('<option>').text(title).attr('value', id);
    }));
  });
  document.querySelector('#urls').addEventListener('paste', function(it){
    return it.preventDefault();
  });
  document.addEventListener('paste', handlePaste);
  return fetch('README.md').then(function(it){
    return it.text();
  }).then(function(it){
    return $('#readme').html(marked(it));
  });
});